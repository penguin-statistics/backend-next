basePath: /
definitions:
  models.Existence:
    properties:
      CN:
        $ref: '#/definitions/models.ServerExistence'
        description: 'CN: 国服 Mainland China Server (maintained by Hypergryph Network
          Technology Co., Ltd.)'
      JP:
        $ref: '#/definitions/models.ServerExistence'
        description: 'JP: 日服 Japan Server (maintained by Yostar Inc,.)'
      KR:
        $ref: '#/definitions/models.ServerExistence'
        description: 'KR: 韩服 Korea Server (maintained by Yostar Limited)'
      US:
        $ref: '#/definitions/models.ServerExistence'
        description: 'US: 美服/国际服 Global Server (maintained by Yostar Limited)'
    required:
    - CN
    - JP
    - KR
    - US
    type: object
  models.I18nString:
    properties:
      en:
        description: 'EN: English (en)'
        type: string
      ja:
        description: 'JP: 日本語 (ja)'
        type: string
      ko:
        description: 'KR: 한국어 (ko)'
        type: string
      zh:
        description: 'ZH: 中文 (zh-CN)'
        type: string
    required:
    - en
    - ja
    - ko
    - zh
    type: object
  models.Notice:
    properties:
      content_i18n:
        items:
          type: integer
        type: array
      existence:
        type: object
      id:
        type: integer
      severity:
        type: integer
    type: object
  models.ServerExistence:
    properties:
      endTime:
        type: integer
      exist:
        type: boolean
      startTime:
        type: integer
    required:
    - exist
    type: object
  pgerr.PenguinError:
    properties:
      code:
        example: INVALID_REQUEST
        type: string
      message:
        example: 'invalid request: some or all request parameters are invalid'
        type: string
    type: object
  shims.Activity:
    properties:
      end:
        type: integer
      existence:
        type: object
      label_i18n:
        type: object
      start:
        type: integer
    type: object
  shims.AdvancedQueryResult:
    properties:
      advanced_results:
        items: {}
        type: array
    type: object
  shims.DropInfo:
    properties:
      bounds:
        type: object
      dropType:
        type: string
      itemId:
        type: string
    type: object
  shims.DropMatrixQueryResult:
    properties:
      matrix:
        items:
          $ref: '#/definitions/shims.OneDropMatrixElement'
        type: array
    type: object
  shims.Item:
    properties:
      alias:
        items:
          type: string
        type: array
      existence:
        type: object
      groupID:
        type: string
      itemId:
        type: string
      itemType:
        type: string
      name:
        type: string
      name_i18n:
        type: object
      pron:
        items:
          type: string
        type: array
      rarity:
        type: integer
      sortId:
        type: integer
      spriteCoord:
        items:
          type: integer
        type: array
    type: object
  shims.LoginResponse:
    properties:
      userID:
        type: string
    type: object
  shims.OneDrop:
    properties:
      itemId:
        type: string
      quantity:
        type: integer
    type: object
  shims.OneDropMatrixElement:
    properties:
      end:
        type: integer
      itemId:
        type: string
      quantity:
        type: integer
      stageId:
        type: string
      start:
        type: integer
      times:
        type: integer
    type: object
  shims.OneItemTrend:
    properties:
      quantity:
        items:
          type: integer
        type: array
      times:
        items:
          type: integer
        type: array
    type: object
  shims.OnePatternMatrixElement:
    properties:
      end:
        type: integer
      pattern:
        $ref: '#/definitions/shims.Pattern'
      quantity:
        type: integer
      stageId:
        type: string
      start:
        type: integer
      times:
        type: integer
    type: object
  shims.Pattern:
    properties:
      drops:
        items:
          $ref: '#/definitions/shims.OneDrop'
        type: array
    type: object
  shims.PatternMatrixQueryResult:
    properties:
      pattern_matrix:
        items:
          $ref: '#/definitions/shims.OnePatternMatrixElement'
        type: array
    type: object
  shims.RecognitionReportResponse:
    properties:
      errors:
        items:
          type: string
        type: array
      taskId:
        example: 0522ce0083000000-1wE2I9dvMFXXzBMpSCYM81rJ0T3tLrAQ
        type: string
    type: object
  shims.ReportResponse:
    properties:
      reportHash:
        example: 0522ce0083000000-1wE2I9dvMFXXzBMpSCYM81rJ0T3tLrAQ
        type: string
    type: object
  shims.SiteStats:
    properties:
      totalApCost:
        type: integer
      totalItemQuantities:
        items:
          $ref: '#/definitions/shims.TotalItemQuantity'
        type: array
      totalStageTimes:
        items:
          $ref: '#/definitions/shims.TotalStageTime'
        type: array
      totalStageTimes_24h:
        items:
          $ref: '#/definitions/shims.TotalStageTime'
        type: array
    type: object
  shims.Stage:
    properties:
      apCost:
        type: integer
      code:
        type: string
      code_i18n:
        type: object
      dropInfos:
        items:
          $ref: '#/definitions/shims.DropInfo'
        type: array
      existence:
        type: object
      minClearTime:
        type: integer
      recognitionOnly:
        items:
          type: string
        type: array
      stageId:
        type: string
      stageType:
        type: string
      zoneId:
        type: string
    type: object
  shims.StageTrend:
    properties:
      results:
        additionalProperties:
          $ref: '#/definitions/shims.OneItemTrend'
        type: object
      startTime:
        type: integer
    type: object
  shims.TotalItemQuantity:
    properties:
      itemId:
        type: string
      quantity:
        type: integer
    type: object
  shims.TotalStageTime:
    properties:
      stageId:
        type: string
      times:
        type: integer
    type: object
  shims.TrendQueryResult:
    properties:
      trend:
        additionalProperties:
          $ref: '#/definitions/shims.StageTrend'
        type: object
    type: object
  shims.Zone:
    properties:
      background:
        type: string
      existence:
        type: object
      stages:
        items:
          type: string
        type: array
      subType:
        type: string
      type:
        type: string
      zoneId:
        type: string
      zoneIndex:
        type: integer
      zoneName:
        type: string
      zoneName_i18n:
        type: object
    type: object
  types.AdvancedQuery:
    properties:
      end:
        type: integer
      interval:
        type: integer
      isPersonal:
        type: boolean
      itemIds:
        items:
          type: string
        type: array
      server:
        type: string
      stageId:
        type: string
      start:
        type: integer
    required:
    - server
    - stageId
    type: object
  types.AdvancedQueryRequest:
    properties:
      queries:
        items:
          $ref: '#/definitions/types.AdvancedQuery'
        maxItems: 5
        minItems: 1
        type: array
    required:
    - queries
    type: object
  types.ArkDrop:
    properties:
      dropType:
        enum:
        - REGULAR_DROP
        - NORMAL_DROP
        - SPECIAL_DROP
        - EXTRA_DROP
        - FURNITURE
        type: string
      itemId:
        type: string
      quantity:
        maximum: 1000
        type: integer
    required:
    - dropType
    - itemId
    - quantity
    type: object
  types.SingleReportRecallRequest:
    properties:
      reportHash:
        example: 0522ce0083000000-1wE2I9dvMFXXzBMpSCYM81rJ0T3tLrAQ
        type: string
    required:
    - reportHash
    type: object
  types.SingleReportRequest:
    properties:
      drops:
        items:
          $ref: '#/definitions/types.ArkDrop'
        type: array
      server:
        example: CN
        type: string
      source:
        description: Source describes a source of the report. Third-party API consumers
          should change this to their own name.
        example: frontend-v2
        maxLength: 32
        type: string
      stageId:
        example: main_01-07
        type: string
      version:
        description: Version describes the version of the source app used to submit
          this report. Third-party API consumers should change this to their own app
          version.
        example: v0.0.0+0000000
        maxLength: 32
        type: string
    required:
    - server
    - source
    - stageId
    - version
    type: object
host: penguin-stats.io
info:
  contact:
    email: alvissreimu@gmail.com
    name: AlvISs_Reimu
    url: https://github.com/AlvISsReimu
  description: This is the Penguin Statistics v3 API, re-designed to aim for lightweight
    on wire.
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
  title: Penguin Statistics API
  version: 3.0.0
paths:
  /PenguinStats/api/v2/_private/result/matrix/{server}/{source}:
    get:
      parameters:
      - description: Server; default to CN
        enum:
        - CN
        - US
        - JP
        - KR
        in: path
        name: server
        required: true
        type: string
      - description: Global or Personal; default to global
        enum:
        - global
        - personal
        in: path
        name: source
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/shims.DropMatrixQueryResult'
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/pgerr.PenguinError'
      summary: Get Drop Matrix
      tags:
      - Private
  /PenguinStats/api/v2/_private/result/pattern/{server}/{source}:
    get:
      parameters:
      - description: Server; default to CN
        enum:
        - CN
        - US
        - JP
        - KR
        in: path
        name: server
        required: true
        type: string
      - description: Global or Personal; default to global
        enum:
        - global
        - personal
        in: path
        name: source
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/shims.PatternMatrixQueryResult'
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/pgerr.PenguinError'
      summary: Get Pattern Matrix
      tags:
      - Private
  /PenguinStats/api/v2/_private/result/trend/{server}:
    get:
      parameters:
      - description: Server; default to CN
        enum:
        - CN
        - US
        - JP
        - KR
        in: path
        name: server
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/shims.TrendQueryResult'
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/pgerr.PenguinError'
      summary: Get Trends
      tags:
      - Private
  /PenguinStats/api/v2/advanced:
    post:
      parameters:
      - description: Query
        in: body
        name: query
        required: true
        schema:
          $ref: '#/definitions/types.AdvancedQueryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 'Drop Matrix Response: when `interval` has been left undefined.'
          schema:
            allOf:
            - $ref: '#/definitions/shims.AdvancedQueryResult'
            - properties:
                advanced_results:
                  items:
                    $ref: '#/definitions/shims.DropMatrixQueryResult'
                  type: array
              type: object
        "202":
          description: 'Trend Response: when `interval` has been defined a value greater
            than `0`. Notice that this response still responds with a status code
            of `200`, but due to swagger limitations, to denote a different response
            with the same status code is not possible. Therefore, a status code of
            `202` is used, only for the purpose of workaround.'
          schema:
            allOf:
            - $ref: '#/definitions/shims.AdvancedQueryResult'
            - properties:
                advanced_results:
                  items:
                    $ref: '#/definitions/shims.TrendQueryResult'
                  type: array
              type: object
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/pgerr.PenguinError'
      summary: Execute Advanced Query
      tags:
      - Result
  /PenguinStats/api/v2/formula:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: ""
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/pgerr.PenguinError'
      summary: Get Formula
      tags:
      - Formula
  /PenguinStats/api/v2/items:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              allOf:
              - $ref: '#/definitions/shims.Item'
              - properties:
                  existence:
                    $ref: '#/definitions/models.Existence'
                  name_i18n:
                    $ref: '#/definitions/models.I18nString'
                type: object
            type: array
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/pgerr.PenguinError'
      summary: Get All Items
      tags:
      - Item
  /PenguinStats/api/v2/items/{itemId}:
    get:
      parameters:
      - description: Item ID
        in: path
        name: itemId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/shims.Item'
            - properties:
                existence:
                  $ref: '#/definitions/models.Existence'
                name_i18n:
                  $ref: '#/definitions/models.I18nString'
              type: object
        "400":
          description: Invalid or missing itemId. Notice that this shall be the **string
            ID** of the item, instead of the internally used numerical ID of the item.
          schema:
            $ref: '#/definitions/pgerr.PenguinError'
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/pgerr.PenguinError'
      summary: Get an Item with ID
      tags:
      - Item
  /PenguinStats/api/v2/notice:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Notice'
            type: array
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/pgerr.PenguinError'
      summary: Get All Notices
      tags:
      - Notice
  /PenguinStats/api/v2/period:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              allOf:
              - $ref: '#/definitions/shims.Activity'
              - properties:
                  existence:
                    $ref: '#/definitions/models.Existence'
                  label_i18n:
                    $ref: '#/definitions/models.I18nString'
                type: object
            type: array
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/pgerr.PenguinError'
      summary: Get All Event Periods
      tags:
      - EventPeriod
  /PenguinStats/api/v2/report:
    post:
      consumes:
      - application/json
      description: Submit a Drop Report. You can use the `reportHash` in the response
        to recall the report in 24 hours after it has been submitted.
      parameters:
      - description: Report Request
        in: body
        name: report
        required: true
        schema:
          $ref: '#/definitions/types.SingleReportRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Report has been successfully submitted
          schema:
            $ref: '#/definitions/shims.ReportResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/pgerr.PenguinError'
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/pgerr.PenguinError'
      security:
      - PenguinIDAuth: []
      summary: Submit a Drop Report
      tags:
      - Report
  /PenguinStats/api/v2/report/recall:
    post:
      consumes:
      - application/json
      description: Recall a Drop Report by its `reportHash`. The farest report you
        can recall is limited to 24 hours. Recalling a report after it has been already
        recalled will result in an error.
      parameters:
      - description: Report Recall Request
        in: body
        name: report
        required: true
        schema:
          $ref: '#/definitions/types.SingleReportRecallRequest'
      produces:
      - application/json
      responses:
        "204":
          description: Report has been successfully recalled
        "400":
          description: '`reportHash` is missing, invalid, or already been recalled.'
          schema:
            $ref: '#/definitions/pgerr.PenguinError'
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/pgerr.PenguinError'
      summary: Recall a Drop Report
      tags:
      - Report
  /PenguinStats/api/v2/report/recognition:
    post:
      description: Submit an Item Drop Report with Frontend Recognition. Notice that
        this is a **private API** and is not designed for external use.
      parameters:
      - description: Recognition Report Request
        in: body
        name: report
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: Report has been successfully submitted for queue processing
          schema:
            $ref: '#/definitions/shims.RecognitionReportResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/pgerr.PenguinError'
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/pgerr.PenguinError'
      security:
      - PenguinIDAuth: []
      summary: Bulk Submit with Frontend Recognition
      tags:
      - Report
  /PenguinStats/api/v2/result/matrix:
    get:
      parameters:
      - description: Server; default to CN
        enum:
        - CN
        - US
        - JP
        - KR
        in: query
        name: server
        required: true
        type: string
      - description: Whether to query for personal drop matrix or not. If `is_personal`
          equals to `true`, a valid PenguinID would be required to be provided (PenguinIDAuth)
        in: query
        name: is_personal
        type: boolean
      - description: Whether to show closed stages or not
        in: query
        name: show_closed_zones
        type: boolean
      - collectionFormat: csv
        description: Comma separated list of stage IDs to filter
        in: query
        items:
          type: string
        name: stageFilter
        type: array
      - collectionFormat: csv
        description: Comma separated list of item IDs to filter
        in: query
        items:
          type: string
        name: itemFilter
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: Drop Matrix response
          schema:
            $ref: '#/definitions/shims.DropMatrixQueryResult'
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/pgerr.PenguinError'
      security:
      - PenguinIDAuth: []
      summary: Get Drop Matrix
      tags:
      - Result
  /PenguinStats/api/v2/result/pattern:
    get:
      parameters:
      - description: Server; default to CN
        enum:
        - CN
        - US
        - JP
        - KR
        in: query
        name: server
        required: true
        type: string
      - description: Whether to query for personal drop matrix or not. If `is_personal`
          equals to `true`, a valid PenguinID would be required to be provided (PenguinIDAuth)
        in: query
        name: is_personal
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/shims.PatternMatrixQueryResult'
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/pgerr.PenguinError'
      security:
      - PenguinIDAuth: []
      summary: Get Pattern Matrix
      tags:
      - Result
  /PenguinStats/api/v2/result/trends:
    get:
      parameters:
      - description: Server; default to CN
        enum:
        - CN
        - US
        - JP
        - KR
        in: query
        name: server
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/shims.TrendQueryResult'
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/pgerr.PenguinError'
      summary: Get Trends
      tags:
      - Result
  /PenguinStats/api/v2/stages:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              allOf:
              - $ref: '#/definitions/shims.Stage'
              - properties:
                  code_i18n:
                    $ref: '#/definitions/models.I18nString'
                  existence:
                    $ref: '#/definitions/models.Existence'
                type: object
            type: array
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/pgerr.PenguinError'
      summary: Get All Stages
      tags:
      - Stage
  /PenguinStats/api/v2/stages/{stageId}:
    get:
      parameters:
      - description: Stage ID
        in: path
        name: stageId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/shims.Stage'
            - properties:
                code_i18n:
                  $ref: '#/definitions/models.I18nString'
                existence:
                  $ref: '#/definitions/models.Existence'
              type: object
        "400":
          description: Invalid or missing stageId. Notice that this shall be the **string
            ID** of the stage, instead of the internally used numerical ID of the
            stage.
          schema:
            $ref: '#/definitions/pgerr.PenguinError'
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/pgerr.PenguinError'
      summary: Get an Stage with ID
      tags:
      - Stage
  /PenguinStats/api/v2/stats:
    get:
      parameters:
      - description: Server; default to CN
        enum:
        - CN
        - US
        - JP
        - KR
        in: query
        name: server
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/shims.SiteStats'
            type: array
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/pgerr.PenguinError'
      summary: Get Site Stats
      tags:
      - SiteStats
  /PenguinStats/api/v2/users:
    post:
      consumes:
      - text/plain
      parameters:
      - description: User ID
        in: body
        name: userId
        required: true
        schema:
          type: integer
      produces:
      - text/plain
      responses:
        "200":
          description: 'User ID. In the deprecated backend this is, for some reason,
            been implemented to return a JSON in the response body but with a `Content-Type:
            text/plain` in the response header instead of the correct `Content-Type:
            application/json`. So the v2 API has replicated this behavior to ensure
            compatibility.'
          schema:
            $ref: '#/definitions/shims.LoginResponse'
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/pgerr.PenguinError'
      security:
      - PenguinIDAuth: []
      summary: Login with PenguinID
      tags:
      - Account
  /PenguinStats/api/v2/zones:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              allOf:
              - $ref: '#/definitions/shims.Zone'
              - properties:
                  existence:
                    $ref: '#/definitions/models.Existence'
                  zoneName_i18n:
                    $ref: '#/definitions/models.I18nString'
                type: object
            type: array
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/pgerr.PenguinError'
      summary: Get All Zones
      tags:
      - Zone
  /PenguinStats/api/v2/zones/{zoneId}:
    get:
      parameters:
      - description: Zone ID
        in: path
        name: zoneId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/shims.Zone'
            - properties:
                existence:
                  $ref: '#/definitions/models.Existence'
                zoneName_i18n:
                  $ref: '#/definitions/models.I18nString'
              type: object
        "400":
          description: Invalid or missing zoneId. Notice that this shall be the **string
            ID** of the zone, instead of the v3 API internally used numerical ID of
            the zone.
          schema:
            $ref: '#/definitions/pgerr.PenguinError'
        "500":
          description: An unexpected error occurred
          schema:
            $ref: '#/definitions/pgerr.PenguinError'
      summary: Get a Zone with ID
      tags:
      - Zone
schemes:
- https
securityDefinitions:
  PenguinIDAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
